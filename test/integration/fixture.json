{ _id: 'unpm',
  name: 'unpm',
  description: 'private npm registry in node',
  'dist-tags': { latest: '0.0.9' },
  versions: 
   { '0.0.9': 
      { name: 'unpm',
        version: '0.0.9',
        description: 'private npm registry in node',
        main: './index.js',
        scripts: [Object],
        bin: [Object],
        author: [Object],
        dependencies: [Object],
        license: 'MIT',
        devDependencies: [Object],
        repository: [Object],
        keywords: [Object],
        bugs: [Object],
        homepage: 'https://github.com/hayes/unpm',
        readme: '&mu;npm\n====\n\nYour own private npm\n\n[![Build Status](https://travis-ci.org/hayes/unpm.png?branch=master)](https://travis-ci.org/hayes/unpm)\n[![Coverage Status](https://coveralls.io/repos/hayes/unpm/badge.png?branch=master)](https://coveralls.io/r/hayes/unpm?branch=master)\n\n## Installation and Usage\n\n### Command line\n\nIf you just want a &mu;npm with the default configuration:\n\n`\nnpm install -g unpm && unpm \n`\n\nNow you have your own npm running at `localhost:8123`.\n\n> You also have a directory called `$(pwd)/data`, which will hold flat files\n> with data on your users, packages, etc.\n\n#### Command line options\n\nThe default command line tool accepts the following flags:\n\n- `--port, -p <number>`: Run &mu;npm\'s http server on port `<number>`\n- `--verbose, -v`: Enable logging to stdout\n- `--log, -l`: Store logs on the file system\n- `--logdir, -L`: Path for log storage, defaults to `$(pwd)`\n- `--datadir, -d`: Path for storing tarballs and data files, defaults to\n`$(pwd)/data`\n\n#### Extended usage\n\nNow use `npm` as normal-- simply specify the URI of the running &mu;npm service\nvia the `--registry` flag, or with the `registry` parameter of your `.npmrc`.\nMost of [npm\'s methods](https://www.npmjs.org/doc/) are supported. \n\nUsage might look something like the following:\n\n```sh\n# Install a module:\nnpm install module-name@1.1.1 --registry http://localhost:8123\n\n# Publish the module defined in the current dir:\nnpm publish --registry http://localhost:8123\n\n# Install dependencies:\nnpm install --registry http://localhost:8123\n\n# Add a user:\nnpm adduser --registry http://localhost:8123\n```\n\n#### Useful tools\n\n- [clone-packages](http://npm.im/clone-packages) allows you to clone packages\nfrom one npm registry to another.\n\n### As a node module\n\nInstall with `npm install unpm`. \n\nNow `require(\'unpm\')` returns a function which takes a `config` object, and\nconstructs a &mu;npm service, with attributes as defined in [Instance](#instance).\n\nThe `config` object can have all the keys defined in\n[Configuration](#configuration), with the following additions:\n\n- `config.backend`: Specifies the persistence layer for &mu;npm. See the default\n  [file-system backend][fs-back] or the alternative [levelDB\n  backend][leveldb-back]\n- `config.sessions`: An object with methods:\n  - `set(data, done)`, where `done` is a node style callback. If successful,\n    `done` will be called with a token which can be used to retrieve `data` via\n    the `get` method. \n  - `get(token, done)`, where `done` is a node style callback. If successful,\n    `done` will be called with the data correspondinging to the token.\n\n  By default, `config.sessions` defaults to a simple, in-memory\n  [store](./lib/models/SessionStore.js).\n\n#### Instance\n\nThe &mu;npm service instance has the following attributes:\n\n- `sessions`: The `config.sessions` object.\n- `server`: An [HTTP\n  server](http://nodejs.org/api/http.html#http_class_http_server) instance\n  which will service the npm api, and the additional resources defined for\n  &mu;npm.\n- `log`: The logging object. Has methods `info` and `error`, which should\n  support the [Bunyan logging\n  API](https://github.com/trentm/node-bunyan#log-method-api).\n- `backend`: The &mu;npm backend. This is a module which encapsulates\n  persistence logic for &mu;npm. It defaults to a\n  [file-system backend][fs-back], but is of course configurable.\n- `router`: The router which defines what logic to invoke for a given requests.\n  It is an instance of [&mu;npm-router](https://github.com/hayes/unpm-router)\n- `config`: The `config` object passed to the constructor.\n- `handler`: The handler for the [`request` event](http://nodejs.org/api/http.html#http_event_request).\n\n## Configuration\n\nA default configuration file is set in [./lib/config.json](./lib/config.json).\nAny configuration options that are not explicitly passed to &mu;npm (via\n`unpm(config)`) will default to the values in that file.\n\nYou can set the following values as configuration options:\n\n#### `config.host`\n\n  `config.host` is passed directly to\n  [`url.format`](http://nodejs.org/api/url.html#url_url_format_urlobj)\n\n  Describes a base URI at which &mu;npm\'s resources will be made\n  available, modulo package name. The URI (with package name) is written to\n  each package\'s metadata. At current this simply sets the URI (modulo name and\n  version) at which package tarballs are available. \n\n  Note: that this may or may not reflect the URI at which &mu;npm\'s resources\n  will be made available.  The intent is to allow &mu;npm to sit behind a proxy,\n  writing its data to a location from which they might be served by a light,\n  fast static asset server. The proxy can route requests to host to the static\n  server, and requests to `unpm`.\n\n  Defaults to:\n\n  ```json\n  {\n    "hostname": "localhost",\n    "protocol": "http",\n    "port": 8123,\n    "pathname": ""\n  }\n  ```\n\n  Package\'s metadata will include a url that looks like the return value of\n  `make_filename`:\n\n  ```javascript\n  var url = require(\'url\') // node\'s url lib\n  \n  function make_filename(name, version) {\n    var filename = name + \'-\' + version + \'.tgz\'\n    \n    return url.format(config.host) + path.join(\'/\', name, \'-\',\'filename\')\n  }\n  ```\n\n#### `config.base_pathname`\n\n  The path prefix from which &mu;npm serves requests.\n\n#### `config.crypto`\n\n  An object to be passed to require(\'[password-hash][password-hash]\').generate\n  as its second argument, when hashing passwords.\n\n#### `config.verbose`\n\n  If true, causes log level info to be printed to standard out.\n\n#### `config.log`\n\n  If true, saves logs, otherwise no logs will be printed. Stores rotational\n  file logs with a period of one day, keeping 10 days worth of archives.\n\n#### `config.log_dir`\n\n  The directory into which to write logs. If this option is defined, but\n  `config.log` is not specifically set, logs **will** still be written. If\n  this option is not defined, but `config.log` is set, logs will be written\n  to the current working directory.\n\n## License\n\n[MIT](./LICENSE)\n\n[fs-back]: https://github.com/jarofghosts/unpm-fs-backend\n[leveldb-back]: https://github.com/hayes/unpm-leveldb\n[password-hash]: https://www.npmjs.org/package/password-hash\n',
        readmeFilename: 'README.md',
        _id: 'unpm@0.0.9',
        dist: [Object],
        _from: '.',
        _npmVersion: '1.4.3',
        _npmUser: [Object],
        maintainers: [Object] } },
  readme: '&mu;npm\n====\n\nYour own private npm\n\n[![Build Status](https://travis-ci.org/hayes/unpm.png?branch=master)](https://travis-ci.org/hayes/unpm)\n[![Coverage Status](https://coveralls.io/repos/hayes/unpm/badge.png?branch=master)](https://coveralls.io/r/hayes/unpm?branch=master)\n\n## Installation and Usage\n\n### Command line\n\nIf you just want a &mu;npm with the default configuration:\n\n`\nnpm install -g unpm && unpm \n`\n\nNow you have your own npm running at `localhost:8123`.\n\n> You also have a directory called `$(pwd)/data`, which will hold flat files\n> with data on your users, packages, etc.\n\n#### Command line options\n\nThe default command line tool accepts the following flags:\n\n- `--port, -p <number>`: Run &mu;npm\'s http server on port `<number>`\n- `--verbose, -v`: Enable logging to stdout\n- `--log, -l`: Store logs on the file system\n- `--logdir, -L`: Path for log storage, defaults to `$(pwd)`\n- `--datadir, -d`: Path for storing tarballs and data files, defaults to\n`$(pwd)/data`\n\n#### Extended usage\n\nNow use `npm` as normal-- simply specify the URI of the running &mu;npm service\nvia the `--registry` flag, or with the `registry` parameter of your `.npmrc`.\nMost of [npm\'s methods](https://www.npmjs.org/doc/) are supported. \n\nUsage might look something like the following:\n\n```sh\n# Install a module:\nnpm install module-name@1.1.1 --registry http://localhost:8123\n\n# Publish the module defined in the current dir:\nnpm publish --registry http://localhost:8123\n\n# Install dependencies:\nnpm install --registry http://localhost:8123\n\n# Add a user:\nnpm adduser --registry http://localhost:8123\n```\n\n#### Useful tools\n\n- [clone-packages](http://npm.im/clone-packages) allows you to clone packages\nfrom one npm registry to another.\n\n### As a node module\n\nInstall with `npm install unpm`. \n\nNow `require(\'unpm\')` returns a function which takes a `config` object, and\nconstructs a &mu;npm service, with attributes as defined in [Instance](#instance).\n\nThe `config` object can have all the keys defined in\n[Configuration](#configuration), with the following additions:\n\n- `config.backend`: Specifies the persistence layer for &mu;npm. See the default\n  [file-system backend][fs-back] or the alternative [levelDB\n  backend][leveldb-back]\n- `config.sessions`: An object with methods:\n  - `set(data, done)`, where `done` is a node style callback. If successful,\n    `done` will be called with a token which can be used to retrieve `data` via\n    the `get` method. \n  - `get(token, done)`, where `done` is a node style callback. If successful,\n    `done` will be called with the data correspondinging to the token.\n\n  By default, `config.sessions` defaults to a simple, in-memory\n  [store](./lib/models/SessionStore.js).\n\n#### Instance\n\nThe &mu;npm service instance has the following attributes:\n\n- `sessions`: The `config.sessions` object.\n- `server`: An [HTTP\n  server](http://nodejs.org/api/http.html#http_class_http_server) instance\n  which will service the npm api, and the additional resources defined for\n  &mu;npm.\n- `log`: The logging object. Has methods `info` and `error`, which should\n  support the [Bunyan logging\n  API](https://github.com/trentm/node-bunyan#log-method-api).\n- `backend`: The &mu;npm backend. This is a module which encapsulates\n  persistence logic for &mu;npm. It defaults to a\n  [file-system backend][fs-back], but is of course configurable.\n- `router`: The router which defines what logic to invoke for a given requests.\n  It is an instance of [&mu;npm-router](https://github.com/hayes/unpm-router)\n- `config`: The `config` object passed to the constructor.\n- `handler`: The handler for the [`request` event](http://nodejs.org/api/http.html#http_event_request).\n\n## Configuration\n\nA default configuration file is set in [./lib/config.json](./lib/config.json).\nAny configuration options that are not explicitly passed to &mu;npm (via\n`unpm(config)`) will default to the values in that file.\n\nYou can set the following values as configuration options:\n\n#### `config.host`\n\n  `config.host` is passed directly to\n  [`url.format`](http://nodejs.org/api/url.html#url_url_format_urlobj)\n\n  Describes a base URI at which &mu;npm\'s resources will be made\n  available, modulo package name. The URI (with package name) is written to\n  each package\'s metadata. At current this simply sets the URI (modulo name and\n  version) at which package tarballs are available. \n\n  Note: that this may or may not reflect the URI at which &mu;npm\'s resources\n  will be made available.  The intent is to allow &mu;npm to sit behind a proxy,\n  writing its data to a location from which they might be served by a light,\n  fast static asset server. The proxy can route requests to host to the static\n  server, and requests to `unpm`.\n\n  Defaults to:\n\n  ```json\n  {\n    "hostname": "localhost",\n    "protocol": "http",\n    "port": 8123,\n    "pathname": ""\n  }\n  ```\n\n  Package\'s metadata will include a url that looks like the return value of\n  `make_filename`:\n\n  ```javascript\n  var url = require(\'url\') // node\'s url lib\n  \n  function make_filename(name, version) {\n    var filename = name + \'-\' + version + \'.tgz\'\n    \n    return url.format(config.host) + path.join(\'/\', name, \'-\',\'filename\')\n  }\n  ```\n\n#### `config.base_pathname`\n\n  The path prefix from which &mu;npm serves requests.\n\n#### `config.crypto`\n\n  An object to be passed to require(\'[password-hash][password-hash]\').generate\n  as its second argument, when hashing passwords.\n\n#### `config.verbose`\n\n  If true, causes log level info to be printed to standard out.\n\n#### `config.log`\n\n  If true, saves logs, otherwise no logs will be printed. Stores rotational\n  file logs with a period of one day, keeping 10 days worth of archives.\n\n#### `config.log_dir`\n\n  The directory into which to write logs. If this option is defined, but\n  `config.log` is not specifically set, logs **will** still be written. If\n  this option is not defined, but `config.log` is set, logs will be written\n  to the current working directory.\n\n## License\n\n[MIT](./LICENSE)\n\n[fs-back]: https://github.com/jarofghosts/unpm-fs-backend\n[leveldb-back]: https://github.com/hayes/unpm-leveldb\n[password-hash]: https://www.npmjs.org/package/password-hash\n',
  maintainers: [ { name: 'andrewwinterman', email: 'andywinterman@gmail.com' } ],
  _attachments: 
   { 'unpm-0.0.9.tgz': 
      { content_type: 'application/octet-stream',
        data: '',
        length: 16282 } } }
